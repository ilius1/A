{"name": "test_store2", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nCurrent browser version is 118.0.5993.89 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0034A813+48355]\n\t(No symbol) [0x002DC4B1]\n\t(No symbol) [0x001E5358]\n\t(No symbol) [0x002061AC]\n\t(No symbol) [0x00201EF3]\n\t(No symbol) [0x00200579]\n\t(No symbol) [0x00230C55]\n\t(No symbol) [0x0023093C]\n\t(No symbol) [0x0022A536]\n\t(No symbol) [0x002082DC]\n\t(No symbol) [0x002093DD]\n\tGetHandleVerifier [0x005AAABD+2539405]\n\tGetHandleVerifier [0x005EA78F+2800735]\n\tGetHandleVerifier [0x005E456C+2775612]\n\tGetHandleVerifier [0x003D51E0+616112]\n\t(No symbol) [0x002E5F8C]\n\t(No symbol) [0x002E2328]\n\t(No symbol) [0x002E240B]\n\t(No symbol) [0x002D4FF7]\n\tBaseThreadInitThunk [0x767BFCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x774C7C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x774C7C3E+238]", "trace": "request = <SubRequest 'setup' for <Function test_store1>>\n\n    @pytest.fixture(scope='class')\n    def setup(request):\n        chrome_options=Options()\n>       browser = webdriver.Chrome(options=chrome_options)\n\nTestProject\\conftest.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:56: in __init__\n    super().__init__(\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:205: in __init__\n    self.start_session(capabilities)\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:289: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013225351610>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774C7C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x774C7C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 114\nE       Current browser version is 118.0.5993.89 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0034A813+48355]\nE       \t(No symbol) [0x002DC4B1]\nE       \t(No symbol) [0x001E5358]\nE       \t(No symbol) [0x002061AC]\nE       \t(No symbol) [0x00201EF3]\nE       \t(No symbol) [0x00200579]\nE       \t(No symbol) [0x00230C55]\nE       \t(No symbol) [0x0023093C]\nE       \t(No symbol) [0x0022A536]\nE       \t(No symbol) [0x002082DC]\nE       \t(No symbol) [0x002093DD]\nE       \tGetHandleVerifier [0x005AAABD+2539405]\nE       \tGetHandleVerifier [0x005EA78F+2800735]\nE       \tGetHandleVerifier [0x005E456C+2775612]\nE       \tGetHandleVerifier [0x003D51E0+616112]\nE       \t(No symbol) [0x002E5F8C]\nE       \t(No symbol) [0x002E2328]\nE       \t(No symbol) [0x002E240B]\nE       \t(No symbol) [0x002D4FF7]\nE       \tBaseThreadInitThunk [0x767BFCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x774C7C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x774C7C3E+238]\n\nH:\\Обучение\\Тестирование\\ДИПЛОМ\\Automatisation\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1697996501667, "stop": 1697996501667, "uuid": "4a7cc4fa-8f69-4fea-be83-fd9543aa2c16", "historyId": "645cb02ead0223808f54295872c39dcf", "testCaseId": "645cb02ead0223808f54295872c39dcf", "fullName": "TestProject.test_1.Test#test_store2", "labels": [{"name": "story", "value": "Тест заказа торта"}, {"name": "severity", "value": "blocker"}, {"name": "epic"}, {"name": "feature", "value": "Тест сайта по продаже тортов"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "TestProject"}, {"name": "suite", "value": "test_1"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "DESKTOP-UJLQ8V0"}, {"name": "thread", "value": "10776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestProject.test_1"}]}